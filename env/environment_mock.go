package env

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// EnvironmentMock implements Environment
type EnvironmentMock struct {
	t minimock.Tester

	funcGetenv          func(s1 string) (s2 string)
	afterGetenvCounter  uint64
	beforeGetenvCounter uint64
	GetenvMock          mEnvironmentMockGetenv
}

// NewEnvironmentMock returns a mock for Environment
func NewEnvironmentMock(t minimock.Tester) *EnvironmentMock {
	m := &EnvironmentMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetenvMock = mEnvironmentMockGetenv{mock: m}
	m.GetenvMock.callArgs = []*EnvironmentMockGetenvParams{}

	return m
}

type mEnvironmentMockGetenv struct {
	mock               *EnvironmentMock
	defaultExpectation *EnvironmentMockGetenvExpectation
	expectations       []*EnvironmentMockGetenvExpectation

	callArgs []*EnvironmentMockGetenvParams
	mutex    sync.RWMutex
}

// EnvironmentMockGetenvExpectation specifies expectation struct of the Environment.Getenv
type EnvironmentMockGetenvExpectation struct {
	mock    *EnvironmentMock
	params  *EnvironmentMockGetenvParams
	results *EnvironmentMockGetenvResults
	Counter uint64
}

// EnvironmentMockGetenvParams contains parameters of the Environment.Getenv
type EnvironmentMockGetenvParams struct {
	s1 string
}

// EnvironmentMockGetenvResults contains results of the Environment.Getenv
type EnvironmentMockGetenvResults struct {
	s2 string
}

// Expect sets up expected params for Environment.Getenv
func (mmGetenv *mEnvironmentMockGetenv) Expect(s1 string) *mEnvironmentMockGetenv {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("EnvironmentMock.Getenv mock is already set by Set")
	}

	if mmGetenv.defaultExpectation == nil {
		mmGetenv.defaultExpectation = &EnvironmentMockGetenvExpectation{}
	}

	mmGetenv.defaultExpectation.params = &EnvironmentMockGetenvParams{s1}
	for _, e := range mmGetenv.expectations {
		if minimock.Equal(e.params, mmGetenv.defaultExpectation.params) {
			mmGetenv.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetenv.defaultExpectation.params)
		}
	}

	return mmGetenv
}

// Return sets up results that will be returned by Environment.Getenv
func (mmGetenv *mEnvironmentMockGetenv) Return(s2 string) *EnvironmentMock {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("EnvironmentMock.Getenv mock is already set by Set")
	}

	if mmGetenv.defaultExpectation == nil {
		mmGetenv.defaultExpectation = &EnvironmentMockGetenvExpectation{mock: mmGetenv.mock}
	}
	mmGetenv.defaultExpectation.results = &EnvironmentMockGetenvResults{s2}
	return mmGetenv.mock
}

//Set uses given function f to mock the Environment.Getenv method
func (mmGetenv *mEnvironmentMockGetenv) Set(f func(s1 string) (s2 string)) *EnvironmentMock {
	if mmGetenv.defaultExpectation != nil {
		mmGetenv.mock.t.Fatalf("Default expectation is already set for the Environment.Getenv method")
	}

	if len(mmGetenv.expectations) > 0 {
		mmGetenv.mock.t.Fatalf("Some expectations are already set for the Environment.Getenv method")
	}

	mmGetenv.mock.funcGetenv = f
	return mmGetenv.mock
}

// When sets expectation for the Environment.Getenv which will trigger the result defined by the following
// Then helper
func (mmGetenv *mEnvironmentMockGetenv) When(s1 string) *EnvironmentMockGetenvExpectation {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("EnvironmentMock.Getenv mock is already set by Set")
	}

	expectation := &EnvironmentMockGetenvExpectation{
		mock:   mmGetenv.mock,
		params: &EnvironmentMockGetenvParams{s1},
	}
	mmGetenv.expectations = append(mmGetenv.expectations, expectation)
	return expectation
}

// Then sets up Environment.Getenv return parameters for the expectation previously defined by the When method
func (e *EnvironmentMockGetenvExpectation) Then(s2 string) *EnvironmentMock {
	e.results = &EnvironmentMockGetenvResults{s2}
	return e.mock
}

// Getenv implements Environment
func (mmGetenv *EnvironmentMock) Getenv(s1 string) (s2 string) {
	mm_atomic.AddUint64(&mmGetenv.beforeGetenvCounter, 1)
	defer mm_atomic.AddUint64(&mmGetenv.afterGetenvCounter, 1)

	params := &EnvironmentMockGetenvParams{s1}

	// Record call args
	mmGetenv.GetenvMock.mutex.Lock()
	mmGetenv.GetenvMock.callArgs = append(mmGetenv.GetenvMock.callArgs, params)
	mmGetenv.GetenvMock.mutex.Unlock()

	for _, e := range mmGetenv.GetenvMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s2
		}
	}

	if mmGetenv.GetenvMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetenv.GetenvMock.defaultExpectation.Counter, 1)
		want := mmGetenv.GetenvMock.defaultExpectation.params
		got := EnvironmentMockGetenvParams{s1}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetenv.t.Errorf("EnvironmentMock.Getenv got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetenv.GetenvMock.defaultExpectation.results
		if results == nil {
			mmGetenv.t.Fatal("No results are set for the EnvironmentMock.Getenv")
		}
		return (*results).s2
	}
	if mmGetenv.funcGetenv != nil {
		return mmGetenv.funcGetenv(s1)
	}
	mmGetenv.t.Fatalf("Unexpected call to EnvironmentMock.Getenv. %v", s1)
	return
}

// GetenvAfterCounter returns a count of finished EnvironmentMock.Getenv invocations
func (mmGetenv *EnvironmentMock) GetenvAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetenv.afterGetenvCounter)
}

// GetenvBeforeCounter returns a count of EnvironmentMock.Getenv invocations
func (mmGetenv *EnvironmentMock) GetenvBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetenv.beforeGetenvCounter)
}

// Calls returns a list of arguments used in each call to EnvironmentMock.Getenv.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetenv *mEnvironmentMockGetenv) Calls() []*EnvironmentMockGetenvParams {
	mmGetenv.mutex.RLock()

	argCopy := make([]*EnvironmentMockGetenvParams, len(mmGetenv.callArgs))
	copy(argCopy, mmGetenv.callArgs)

	mmGetenv.mutex.RUnlock()

	return argCopy
}

// MinimockGetenvDone returns true if the count of the Getenv invocations corresponds
// the number of defined expectations
func (m *EnvironmentMock) MinimockGetenvDone() bool {
	for _, e := range m.GetenvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetenvMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetenvCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetenv != nil && mm_atomic.LoadUint64(&m.afterGetenvCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetenvInspect logs each unmet expectation
func (m *EnvironmentMock) MinimockGetenvInspect() {
	for _, e := range m.GetenvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EnvironmentMock.Getenv with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetenvMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetenvCounter) < 1 {
		if m.GetenvMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to EnvironmentMock.Getenv")
		} else {
			m.t.Errorf("Expected call to EnvironmentMock.Getenv with params: %#v", *m.GetenvMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetenv != nil && mm_atomic.LoadUint64(&m.afterGetenvCounter) < 1 {
		m.t.Error("Expected call to EnvironmentMock.Getenv")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EnvironmentMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetenvInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EnvironmentMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EnvironmentMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetenvDone()
}
